package proto

import "encoding/json"

// Request -- запрос клиента к серверу.
type Request struct {
	// Поле Command может принимать три значения:
	// * "quit" - прощание с сервером (после этого сервер рвёт соединение);
	// * "add" - передача нового элемента на сервер;
	// * "height" - просьба посчитать наибольшую высоту, на которую поднимется камень
	Command string `json:"command"`

	// Если Command == "add", в поле Data должен лежать элемент
	// в виде структуры Elem.
	// В противном случае, поле Data пустое.
	Data *json.RawMessage `json:"data"`
	
	// Id запроса, целое число в промежутке [0;n].
	// Нужен для правильной обработки запроса.
	Id string `json:"ide"`
}

// Response -- ответ сервера клиенту.
type Response struct {
	// Поле Status может принимать 4 значения:
	// * "failed" - в процессе выполнения команды произошла ошибка;
	// * "result" - наибольшая высота вычислена.
	// * "ok" - успешное выполнение команды "quit" или "add";
	// * "bye" - клиент отключен от сервера
	Status string `json:"status"`

	// Если Status == "failed", то в поле Data находится сообщение об ошибке.
	// Если Status == "result", в поле Data должно лежать целое число - высота
	// Если Status == "ok", в поле Data должен лежать элемент в виде структуры Elem.
	// В противном случае, поле Data пустое.
	Data *json.RawMessage `json:"data"`
	
	// При правильно обработаном запросе 
	// Id запроса - целое число  в промежутке [0;n].
	// Если запрос обработан неверно то = -777.
	Id string `json:"ide"`
}

// Elem -- структура элемента.
type Elem struct {
	// Скорость (камень брошен с земли с данной скоростью)
	Velocity string `json:"vel"`

	// Угол (камень брошен под данным углом к горизонту)
	Angle string `json:"ang"`
}